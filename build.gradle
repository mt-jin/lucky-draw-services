import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'idea'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id 'org.jetbrains.kotlin.kapt' version '1.7.22'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    kapt 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation('io.rest-assured:rest-assured:5.2.0')
    testImplementation('io.rest-assured:json-path:5.2.0')
    testImplementation('io.rest-assured:xml-path:5.2.0')
    testImplementation 'com.github.database-rider:rider-junit5:1.36.0'

    testImplementation ('io.rest-assured:kotlin-extensions:5.2.0')
    testImplementation 'io.mockk:mockk:1.13.4'
    testRuntimeOnly "com.h2database:h2"
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


sourceSets {
    apiTest {
        kotlin.srcDir("src/apiTest/kotlin")
        resources.srcDir("src/apiTest/resources")
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}
configurations {
    apiTestImplementation.extendsFrom testImplementation
    apiTestRuntimeOnly.extendsFrom testRuntimeOnly
}
dependencies {
    apiTestImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

tasks.register('apiTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
}
check.dependsOn apiTest
tasks.withType(Copy).configureEach { duplicatesStrategy 'exclude' }


idea {
    module {
        testSourceDirs = testSourceDirs + sourceSets.apiTest.allSource.srcDirs
        testResourceDirs = testResourceDirs + sourceSets.apiTest.resources.srcDirs
    }
}


