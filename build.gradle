import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'idea'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id 'org.jetbrains.kotlin.kapt' version '1.7.22'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    kapt 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation "io.mockk:mockk:1.13.4"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

//    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'com.github.database-rider:rider-junit5:1.36.0'
    testRuntimeOnly "com.h2database:h2"
//    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner")
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:3.1.6'



}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    apiTest {
            kotlin.srcDir("src/apiTest/kotlin")
            resources.srcDir("src/apiTest/resources")
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

tasks.register('apiTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
}


configurations {
    apiTestImplementation.extendsFrom testImplementation
}


idea {
    module {
        testSourceDirs = testSourceDirs + sourceSets.apiTest.allSource.srcDirs
        testResourceDirs = testResourceDirs + sourceSets.apiTest.resources.srcDirs
    }
}


